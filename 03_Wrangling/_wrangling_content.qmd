
```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
library(kableExtra)
library(tidyverse)
library(datasauRus)
library(knitr)
options("kableExtra.html.bsTable" = T)
kable_pretty <- function(data) {
  kable(data, "html") %>%
    kable_styling(bootstrap_options = c("striped", "condensed", full_width=T, position = "center"), full_width=F)
}
```



## Transforming data using `dplyr`

A lot of useful functions are provided by the package `dplyr`. 

```{r echo = FALSE, out.width = "15%"}
include_graphics("./figures/dplyr.png")
```

- create subsets of data
- create new variables
- rename variables
- reorder observations
- ...


::: {.content-visible when-profile="website"}

# Subsetting

Often we want to narrow down a large datset to a subset, either by filtering observations (i.e. reduce the number of rows) or by selecting specific variables only (i.e. reduce the number of columns). 

`Dplyr` provides two handy functions for this

- filter()
- select()


:::


::: {.content-visible when-profile="slides"}

## Subsetting

Often we want to narrow down a large datset to a subset, either by filtering observations (i.e. reduce the number of rows) or by selecting specific variables only (i.e. reduce the number of columns). 

`Dplyr` provides two handy functions for this

- filter()
- select()


:::




## Filter rows with filter()

Create a subset of observations based on values of certain variables.  

For this we use **logical operators**. 

```{r}
filter(mpg, class == "2seater")
```

We can also use multiple conditions

```{r}
filter(mpg, class == "2seater", trans == "auto(l4)")
```


## Comparisons

Using comparisons: 

`>`, `>=`, `<`, `<=`, `==`, `!=` 

Example: Keep all data where `hwy` is larger or equal to and cyl is equal or less than 4.

```{r}
filter(mpg, hwy >= 30, cyl <= 4)
```


Take care: 

`=` instead of `==` produces error. Happens to me all the time...


## Logical operators

We can use logical operators to filter data. The most important operators are illustrated in the following figure

```{r echo = FALSE, out.width = "60%"}
include_graphics("./figures/Boolean_operators.png")
```

Can be applied as follows: 

```{r, eval = FALSE}
## keep rows where cyl has value 4 OR 5
filter(mpg, cyl == 4 | cyl == 5)

# keep rows where cyl has value 4 but drv IS NOT "f"
filter(mpg, cyl == 4,  drv != "f")

```

Instead of using several OR conditions, `%in%` provides a nice shortcut and can simplify life: 

```{r, eval = FALSE}
filter(mpg, cyl == 4 | cyl == 5)

filter(mpg, cyl %in% c(4,5))
```

> Combining multiple conditions can quickly become confusing. Consider doing it stepwise.


## Negate statements

Sometimes it is easier to define what should stay out, instead of what should stay in. We can define what should go out and use `!` to negate this statement. See the following example:

Aim : exclude all SUVs from manufacturer Chevrolet

```{r, eval = FALSE}

filter(mpg, !(class == "suv" & manufacturer == "chevrolet"))

```


::: {.content-visible when-profile="website"}

# Arrange data

:::

## Arrange rows in ascending order: arrange()

We can order the observations by values of one (or more) variable. 

Example: order the dataset `mpg`in ascending order according to the variable `hwy`.

```{r, out.width="50%"}
arrange(mpg, hwy)
```

## arrange in reversed order

By using `desc()`we can change the order to descending. 

```{r, out.width="50%"}

arrange(mpg, desc(hwy))
```

## arrange(): multiple variables

We can use multiple variables to define the order of the arranged dataset.

Note: order of the variables matters:

```{r}
arrange(mpg, desc(cyl), hwy)
```


::: {.content-visible when-profile="website"}


# Select variables 


:::

## Select columns: select()

We can also choose specific columns of dataset (and remove the rest). 

Example: From the dataset `mpg`we only want to keep the columns `model`, `drv`, andn `hwy`. 

```{r}
select(mpg, model, drv, hwy)
```

Example: Keep all columns from `year` to `cty`. 

```{r}
select(mpg, year:cty)
```

## Reverse selection

Instead of actively selecting the columns we want, we can also remove those which we don't want: 

```{r}
select(mpg, -model, - cyl)
```


## select(): helper functions

- reorder the columns

```{r, eval = FALSE}
select(mpg, hwy, cyl, everything())
```

- rename columns

```{r, eval = FALSE}
rename(mpg, efficiency = hwy)

select(mpg, efficiency = hwy, everything())

```

- various other options: see the help by calling `?select`


::: {.content-visible when-profile="website"}

# Create new variables: mutate()

With `mutate()` we can create a new variable which is added at the end of our dataset. 


:::

::: {.content-visible when-profile="slides"}

## Create new variables: mutate()

With `mutate()` we can create a new variable which is added at the end of our dataset. 

:::



## Calculate a new variable

Example: Calculate fuel consumption (L / 100km) = 1 / hwy /2.352 * 100

```{r}
mpg2 <- mutate(mpg, consump = 1 / hwy * 2.352 * 100)

head(mpg2)
```

## Calculate a new variable in multiple steps

In case of long formulas it can increase clarity to do the calculation stepwise

```{r}
mpg2 <- mutate(mpg, consump = 1 / hwy * 2.352 * 100)
# alternative: stepwise
mpg2 <- mutate(mpg, 
              consump = 1 / hwy, # gallons per mile
              consump = consump * 2.352 * 100) # L/100km

head(mpg2)
```

Note: mutate() can immediatly re-use any newly created variables within the same call of `mutate()`.


::: {.content-visible when-profile="slides"}


## The Pipe Operators: `%>%` and `|>`

R provides a useful operatur called the pipe. Initially it was introduced within the tidyverse, and the pipe operator looked like this `%>%`. 

```{r echo = FALSE, out.width = "25%"}
include_graphics("./figures/pipe.png")
```

R-Studio Shortcut: __Ctrl + Shift + M__


:::



::: {.content-visible when-profile="website"}

# The Pipe Operators: `%>%` and `|>`

R provides a useful operatur called the pipe. Initially it was introduced within the tidyverse, and the pipe operator looked like this `%>%`. 

```{r echo = FALSE, out.width = "25%"}
include_graphics("./figures/pipe.png")
```

Recently, a pipe operator was also introduced natively in R, where it is `|>`.

The idea is the same: The pipe is a really useful operator to string together multiple operations in R. 

R-Studio Shortcut: __Ctrl + Shift + M__

In R Studio you can choose in the global options, whether you want to use the tidy pipe or the native pipe. 

:::


## How to use the pipe %>%

Passes object on the lefthand side as first argument of function on righthand side. 

- `x %>% f(y)` is similar to `f(x,y)`

Example:

```{r, eval = FALSE}
filter(mpg, class == "seater" | class == "compact")

# is similar to

mpg %>% 
  filter(class == "seater" | class == "compact")

```


## Combine Multiple Operations: %>%

It becomes to really useful when doing multiple operations at once: 

```{r}
mpg_sub <- mpg %>% 
  filter(class == "2seater" | class == "compact") %>% 
  select(class, manufacturer, cyl, displ, hwy) %>% 
  mutate(consump = 1/hwy) %>% 
  arrange(hwy)
head(mpg_sub)

```

A lot is happening in these few lines, and the pipe allows for a very concise and readable piece of code. 

## Combine Pipe with ggplot()

We can even combine it with ggplot!

Note: within ggplot you have to use `+`, before the ggplot-call you have to use `%>%`. Confusing indeed... 

```{r, out.width = "60%"}
mpg %>% 
  filter(class == "2seater" | class == "compact") %>%  
  ggplot(aes(x = displ, y = hwy, color = class)) + 
  geom_point()
```



::: {.content-visible when-profile="website"}

# Time to try it yourself: 

--> check out Exercise Part 1.

:::



::: {.content-visible when-profile="slides"}

## Time to try it yourself: 

--> check out Exercise Part 1.

:::



::: {.content-visible when-profile="website"}

# Summarising and grouping data

:::



::: {.content-visible when-profile="slides"}

## Summarising and grouping data

:::


## Summarize data: summarise()

Collapses data frame to a single row by using a supplied function. 

Example: What is the average `hwy` of all cars in the dataset?

```{r}
mpg %>% 
  summarise(hwy = mean(hwy))
```


## multiple summary functions

Also possible for multiple functions and variables

```{r}
mpg %>% 
  summarise(hwy_avg = mean(hwy), 
          hwy_max = max(hwy), 
          hwy_min = min(hwy),
          hwy_sd = sd(hwy), 
          displ_avg = mean(displ))
          
```


## Summarize different groups: group_by() & summarise()

We can define groups in the dataset for which we calculate summary values. 

Example: What is the average `hwy` for each car-class?

```{r}

by_class <- mpg %>% 
  group_by(class) %>% 
  summarise(hwy_avg = mean(hwy))
by_class


```

--> we can summarise values for all kind of groups!

## Group_by() with several grouping variables

We can also use several variables for the grouping. 

```{r}

by_class_drv <- mpg %>% 
  group_by(class, drv) %>% 
  summarise(avg_hwy = mean(hwy))
by_class_drv


```


>- __Important__: before we can group this dataset again we need to `ungroup()` first!


## Advanced Example: Group_by() & summarise()

```{r}

by_class <- mpg %>% 
  group_by(class) %>% 
  summarise(hwy_avg = mean(hwy), 
            hwy_sd = sd(hwy), 
            displ_avg = mean(displ), 
            displ_sd = sd(displ), 
            count = n())
by_class


```

## Advanced Example: Group_by() & summarise() & ggplot()


```{r, out.width = "50%"}

by_class %>% 
  ggplot(aes(x = displ_avg, y = hwy_avg, color = class,
             ymin = hwy_avg - hwy_sd, ymax = hwy_avg + hwy_sd, 
             xmin = displ_avg - displ_sd, xmax = displ_avg + displ_sd)) + 
  geom_point(aes(size = count)) + 
  geom_errorbar(width = 0) +
  geom_errorbarh(height = 0)

```


## Group_by() & mutate()

Calculations on group level without collapsing the dataset. 

```{r}
mpg %>% 
  group_by(class) %>% 
  mutate(avg_hwy = mean(hwy, na.rm=TRUE)) %>% 
  select(1:2, hwy, avg_hwy)
```



::: {.content-visible when-profile="website"}

# Missing values

- Missing values are observations with no information. 
- this is __not__ the same as zero!


```{r}
(df <- data.frame(x = c(1,3,NA,7), 
                 y = c(2,4,2,9)))
```


:::


::: {.content-visible when-profile="slides"}

## Missing values

- Missing values are observations with no information. 
- this is __not__ the same as zero!


```{r}
(df <- data.frame(x = c(1,3,NA,7), 
                 y = c(2,4,2,9)))
```

:::


## How to check for missing values

We can check for missing values by `is.na()`. Also the function summary() tells us about it. 

```{r out.width="80%"}
is.na(df)
summary(df)
```


## Calculations with missing values

What happens if we summarize columns with missing values?

```{r}
# summarise df
df %>% 
  summarise(x = mean(x), 
            y = mean(y))

# Often better:
# summarise omitting NA's, 
df %>% 
  summarise(x = mean(x, na.rm=TRUE), 
            y = mean(y, na.rm=TRUE))


```

## Removing NA's from dataset

You can remove observations (rows) from your dataset that include NA's in a specific column using

```{r}
# remove all rows that contain NA's in the column hwy
mpg %>% 
  filter(!is.na(hwy))
```


::: {.content-visible when-profile="website"}

# Data Wrangling Cheat Sheet

<https://rstudio.com/wp-content/uploads/2015/02/data-wrangling-cheatsheet.pdf>

```{r echo = FALSE, out.width = "60%"}
include_graphics("./figures/Cheatsheet_wrangling.png")
```

:::

::: {.content-visible when-profile="website"}


# Exercise Part 2


Things are coming together...

:::

