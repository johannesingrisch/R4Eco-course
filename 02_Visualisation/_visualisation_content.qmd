## Data Exploration

> First step is to get an overview over the dataset that we want to work on

## Example: Dataset mpg

- 'mpg': fuel economy data of cars
- how does the data look like? We could open it in Excel..

```{r echo = FALSE, out.width = "70%"}
include_graphics("./figures/mpg_excel.PNG")

```

---

For provided datasets we can use the R help to get more info

```{r, eval = FALSE}
?(mpg)
```

--- 

Look at the first 6 lines of the dataset

```{r}
head(mpg)
```

displ: engine displacement in litres
hwy: highway efficiency (miles per gallon)

---

More info about the structure of the datset

```{r}
str(mpg)
```

---

Additional functions, check it out by yourself!

```{r, eval = FALSE}
summary(mpg)
```


```{r, eval = FALSE}
glimpse(mpg)
```


```{r, eval = FALSE}
view(mpg)
```

```{r, eval = FALSE}
dim(mpg)
```



## Data Visualisation 

> Look at your data to understand your data

Different options to create plots in R

- base R: ok, but sometimes well annoying
- plotly
- ggplot2: versatile. elegant. consistent. fun. wohooo!


## ggplot2: Inspiration

```{r echo = FALSE, out.width = "90%"}
include_graphics("./figures/ggplot_examples.png")

```

## ggplot2

From the ggplot2 [manual](https://ggplot2.tidyverse.org/)

*ggplot2 is a system for declaratively creating graphics, based on [**The Grammar of Graphics**](https://www.amazon.com/Grammar-Graphics-Statistics-Computing/dp/0387245448/ref=as_li_ss_tl). You provide the data, tell ggplot2 how to map variables to aesthetics, what graphical primitives to use, and it takes care of the details.*

## Creating a figure layer by layer

**(1) The canvas**

```{r, out.width = "50%"}
mpg %>% 
  ggplot()
```

---

**(2) Add Axes**

We want to plot `hwy ~Â displ`

displ: engine volume
hwy: fuel efficiency (miles per gallon)

```{r, out.width = "50%"}
mpg %>% 
  ggplot(aes(x = displ, y = hwy))
```

---

**(3) Add Data**

-> addding a layer of points

```{r, out.width = "50%"}
mpg %>% 
  ggplot(aes(x = displ, y = hwy)) + 
  geom_point()
```

---

**(4) Use Colors**

-> adding color to the points, depeding on the value of variable `manufacturer`

```{r, out.width = "50%"}
mpg %>% 
  ggplot(aes(x = displ, y = hwy, color = manufacturer)) + 
  geom_point()
```

---

**(5) Add Labels**

```{r, out.width = "50%"}
mpg %>% 
  ggplot(aes(x = displ, y = hwy, color = manufacturer)) + 
  geom_point() + 
  labs(title = "Large displacement lowers fuel efficiency", 
       x = "Displacement", y = "Efficiency", 
       caption = "mgp data")
```

---

**(6) Save output**

```{r, eval = FALSE}
p <- mpg %>% 
  ggplot(aes(x = displ, y = hwy, color = manufacturer)) + 
  geom_point() 
ggsave("displ_vs_hwy.png", plot = p)

```

>- free choice of data format (.pdf, .png)
>- numerous options to change size, scaling etc., see ?ggsave
>- saves directly into working directory, unless specified differently (e.g. in subfolder)


## Time to try it yourself

--> check out Exercise Part 1. 


## ggplot: General template

The general template for a ggplot call is the following:

```{r, eval = FALSE}
ggplot(data = <DATA>) + 
  <GEOM_FUNCTION>(aes(<MAPPINGS>))
```

To make a graph, we replace the bracketed sections with 

- a dataset
- a geom function
- a collection of mappings/aestethics

## mappings: colors & shapes & linetypes

:::: {.columns}

::: {.column width="40%"}
- color
- fill
- shape
- linetype
- size
- alpha
:::

::: {.column width="60%"}
![Shapes & Linetypes](./figures/ggplot_aes.png)
:::

::::



## Mapping colors
```{r out.width="50%"}
ggplot(data = mpg) + 
  geom_point(aes(x = displ, y = hwy, 
            color = drv))
```

## Mapping shapes

```{r}
ggplot(data = mpg) + 
  geom_point(aes(x = displ, y = hwy, 
             shape = drv))
```



## Automatic vs. manual setting of mappings

```{r}
#| layout-ncol: 2
ggplot(data = mpg) + 
  geom_point(aes(x = displ, y = hwy, 
             color = drv))

ggplot(data = mpg) + 
  geom_point(aes(x = displ, y = hwy), 
             color = "red")
```

## geoms

geom_point(), geom_line(), geom_smooth(), ... and tons of others!

```{r, out.width="50%", message = FALSE}
#| layout-ncol: 2

ggplot(data = mpg) + 
  geom_point(aes(x = displ, y = hwy))

ggplot(data = mpg) + 
  geom_smooth(aes(x = displ, y = hwy))

```

## Combine it!


```{r, out.width = "50%"}
ggplot(data = mpg) + 
  geom_point(aes(x = displ, y = hwy, color = drv)) +
  geom_smooth(aes(x = displ, y = hwy))
```



## Avoid Code Duplication

```{r, eval = FALSE}
ggplot(data = mpg) + 
  geom_point(aes(x = displ, y = hwy)) +
  geom_smooth(aes(x = displ, y = hwy))
```

Can be simplified to:

```{r, eval = FALSE}
ggplot(data = mpg, 
       aes(x = displ, y = hwy)) + 
  geom_point() + 
  geom_smooth()
```


## Note the difference!

```{r, out.width="50%", message = FALSE}
#| layout-ncol: 2
# V1
ggplot(data = mpg) + 
  geom_point(aes(x = displ, y = hwy, 
                 color = drv)) +
  geom_smooth(aes(x = displ, y = hwy))

# V2 
ggplot(data = mpg, 
       aes(x = displ, y = hwy, color = drv)) + 
  geom_point() + 
  geom_smooth()

```

>__What is happening here?__


## Note the difference!

> aes() applied to all geoms or individually.



```{r, out.width="50%", message = FALSE}
#| layout-ncol: 2
# V1
ggplot(data = mpg, 
       aes(x = displ, y = hwy, color = drv)) + 
  geom_point() + 
  geom_smooth()

# V2
ggplot(data = mpg, 
       aes(x = displ, y = hwy)) + 
  geom_point(aes(color = drv)) + 
  geom_smooth()

```


## Individual aes() for different geoms

Different ways to achieve the same.

```{r, out.width="80%", message = FALSE}
#| layout-ncol: 2
# V1
ggplot(data = mpg, 
       aes(x = displ, y = hwy)) + 
  geom_point(aes(color = drv)) + 
  geom_smooth()

# V2
ggplot(data = mpg, 
       aes(x = displ, y = hwy, color = drv)) + 
  geom_point() + 
  geom_smooth(aes(group = 1))

```


## Discrete vs. continuous variables


```{r}
head(mpg)
```


## Discrete vs. continuous variables


```{r}
#| layout-ncol: 2
ggplot(data = mpg, 
       aes(x = displ, y = hwy)) + 
  geom_point(aes(color = drv)) 

ggplot(data = mpg, 
       aes(x = displ, y = hwy, color = cty)) + 
  geom_point() 
```


## Geoms with statistical transformation

ggplot provides geoms, that apply a statistical tranformation of the data prior to plotting it. These include: 

- geom_smooth
- geom_bar
- geom_boxplot
- geom_density
- geom_violine


## Example: geom_bar


```{r, out.width="50%"}
ggplot(data = mpg) + 
  geom_bar(aes(x = class))
```

Count does not show up in the original data!

-> calculated by algorithm, the so-called __stat__

## Example: geom_bar


```{r echo = FALSE, out.width = "85%"}
include_graphics("./figures/visualization-stat-bar.png")
```

Different __geom__ have different default __stat__. 

check __?geom_bar__ for details to each geom.

Source: (R4DS)[https://r4ds.had.co.nz/]




## Example: geom_bar

- We can override the default __stat__. 
- Example: proportion instead of absolute count
- look up the 'computed variables' in the help section

```{r, out.width = "50%"}
ggplot(data = mpg) + 
  geom_bar(aes(x = class, y = ..prop.., group = 1))
```

## Boxplots & Violin-Plots

```{r out.width="80%"}
#| layout-ncol: 2

# V1
ggplot(data = mpg) + 
  geom_boxplot(aes(x = class, y = hwy, 
                   fill = class))

# V2
ggplot(data = mpg) + 
  geom_violin(aes(x = class, y = hwy, 
                  fill = class))
```


## Visualize distributions

```{r, out.width = "70%"}
ggplot(data = mpg) + 
  geom_density(aes(x = hwy, fill = drv), alpha = 0.5)
```


## Facets

Facets are a convenient way to split a figure into multiple subpanels. 

**facet_wrap**

```{r, out.width = "80%"}
ggplot(data = mpg) + 
  geom_point(mapping = aes(x = displ, y = hwy)) + 
  facet_wrap(~ class, nrow = 2)
```



## facets

**facet_grid**: Split into columns and rows.

```{r, out.width = "80%"}
ggplot(data = mpg) + 
  geom_point(mapping = aes(x = displ, y = hwy)) + 
  facet_grid(drv ~ cyl)
```

Variables for facet_wrap and facet_grid should be discrete!


## Unhappy how it looks?

Many ways to customize your figures

>- change general appearance: __themes__ 
>- change color, linetypes, shapes, etc.: __scales__
>- adjust axis labels, ...
>- ...

::: aside

**Get inspired** in the [R-graph gallery](https://r-graph-gallery.com/)

:::



## Urgent Help: The ggplot cheatsheet

[ggplot cheatsheet](https://rstudio.com/wp-content/uploads/2015/03/ggplot2-cheatsheet.pdf)

```{r echo = FALSE, out.width = "75%"}
include_graphics("./figures/ggplot_cheatsheet.PNG")
```


## Useful Resources

__Hands on__

- http://www.cookbook-r.com/Graphs/
- https://ggplot2.tidyverse.org/
- Stackoverflow
- Twitter: #rstats
- https://www.springer.com/de/book/9783319242750: great book, but not for free :(



__Theory__

H. Wickham (2010): A layered grammar of graphics. Journal of Computational and Graphical Statistics, 19(1), pp 3-28.

https://vita.had.co.nz/papers/layered-grammar.html

Claus Wilke: Fundamentals of Data Visualization

https://clauswilke.com/dataviz/



## Exercise Part 2

Check out the second part of the exercise to get some more practice. 
