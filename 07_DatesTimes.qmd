# Dates & Times


```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
library(kableExtra)
library(tidyverse)
library(datasauRus)
library(knitr)
library(nycflights13)
options("kableExtra.html.bsTable" = T)
kable_pretty <- function(data) {
  kable(data, "html") %>%
    kable_styling(bootstrap_options = c("striped", "condensed", full_width=T, position = "center"), full_width=F)
}
```



# Dates & Times

```{r echo = FALSE, out.width = "25%"}
include_graphics("./figures/lubridate.png")
```

## Dates & Times

Times are difficult. 

Tons of formats, e.g. 

```{r, eval = FALSE}
"2017-01-31 6 p.m."
"January 31st, 2017, 18:00"
"31-Jan-2017 18-00"
# and many more...

```

Further complications... 

>- time zones
>- daylight saving times
>- leap years
>- used to be very complicated in base-R
>- The package `lubridate` comes in for the rescue...

## Dates & Times

- typically stored in textfiles as strings
- we can transfrom them to date/time objects

- R distinguishes three classes 

>- __date__: prints as `<date>` 
>- __time__: prints as `<time>`
>- __date-time__: contains date + time, also called POSIXct

>- use the simplest possible class suitable for you

## Dates & Times from strings



```{r, message = FALSE}
a <-"2017-01-31 20:11:59"
# transform a into date-time object

# Base-R
a1 <- as.POSIXct(strptime(a, format = "%Y-%m-%d %H:%M:%S"))
a1

# Lubridate
library(lubridate) # not part of core-tidyverse, install and load separately
a2 <- ymd_hms(a)
a2

# watch out for timezones!


```

## Dates & Times from strings

```{r}
ymd("2017-01-31")
ymd(20170131)

mdy("January 31st, 2017")

dmy("31-Jan-2017")


```


## Dates & Times from strings

If not timezone is provided, `lubridate` assumes time is in 'UTC'.

```{r}

ymd_hms("2017-01-31 20:11:59")
mdy_hm("01/31/2017 08:01")

# define timezone
ymd_hms("2017-01-31 20:11:59", tz = "Europe/Berlin")


```


## Merge from individual components

```{r}
flights %>% 
  select(year, month, day, hour, minute) %>% 
  head()

flights %>% 
  select(year, month, day, hour, minute) %>% 
  mutate(departure = make_datetime(year, month, day, hour, minute))


```


## Access components

Accessor-functions: `year()`, `month()`, etc...

```{r}
a <- ymd_hms("2017-01-31 20:11:59")

year(a)
yday(a) # julian day
wday(a, label = TRUE) # weekday
```


## round dates/times

Round to a nearby unit of time: `floor_date()`, `round_date()`, `ceiling_date()`

- you can specify units
- multiple of units possible, e.g. round to 15 minutes (useful for time-series)

```{r}
a <- ymd_hms("2017-01-31 20:11:59")

round_date(a, unit = "hour")

ceiling_date(a, unit = "15 minute")

```

## Time Zones

Recommendation: always define the timezone you are working in

```{r}

a <- ymd_hms("2017-01-31 20:11:59", tz = "Europe/Berlin")
a
```

change Timezones with `with_tz()`

List of time zones in `OlsonNames()`: typically defined as Continent/City

```{r}

b <- with_tz(a, tzone = "America/Phoenix")
b
```
