# From Messy Data To Tidy Data


```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
library(kableExtra)
library(tidyverse)
library(datasauRus)
library(knitr)
library(nycflights13)
options("kableExtra.html.bsTable" = T)
kable_pretty <- function(data) {
  kable(data, "html") %>%
    kable_styling(bootstrap_options = c("striped", "condensed", full_width=T, position = "center"), full_width=F)
}
```

# Tidy Data

“Happy families are all alike; every unhappy family is unhappy in its own way.” –– Leo Tolstoy

“Tidy datasets are all alike, but every messy dataset is messy in its own way.” –– Hadley Wickham


## What is 'tidy data'?

```{r echo = FALSE, out.width = "65%"}
include_graphics("./figures/Wickham_tidydata_screenshot.png")
```

Link: 
http://www.jstatsoft.org/v59/i10/paper


## Same data can be stored in multiple ways

```{r, out.height= "50%"}
# wide representation 
table1

# long representation
table2
```




## Same data can be stored in multiple ways

```{r, out.height= "50%"}
table1

table3
```

## Same data can be stored in multiple ways

Spread into multiple tables

```{r, out.height= "50%"}
# cases
table4a

# population
table4b
```


## Not of all representations are easy to work with

A tidy dataset follows __3 Rules:__

1. Each variable must have its own column
2. Each observation must have its own row
3. Each value must have its own cell

```{r echo = FALSE, out.width = "85%"}
include_graphics("./figures/tidydata_rules.png")
```


## Why ensure that your data is tidy?

1. Consistent data structure makes it easier to apply tools that work with it

2. Most R-functions work vectorised.

3. Works neatly with all types of tidyverse packages

## Which data structure is tidy?

Check out these datasets

```{r, eval = FALSE}
library(tidyverse)
table1
table2
table3
table4a
table4b
```


>- how are they organised? 
>- which fulfills the criteria of tidy data? why? or why not?
>- you want to calculate the infection rate = cases / population * 1000. Describe in prose how you would do it based on the different tables?

>- __Which is easiest to work with? __



## So why is not all data always tidy?

>- Most data is __not__ tidy. 

>- Most of the time we will need to tidy up before analysis


## So why is not all data always tidy?

- Most data is __not__ tidy. 

- Most of the time we will need to tidy up before analysis

- The tidyverse comes for rescue

## Tidyr

```{r echo = FALSE, out.width = "25%"}
include_graphics("./figures/tidyr.png")
```

Two major functions to transform tables 

>- pivot_wider(): make long tables wide

>- pivot_longer(): make wide tables long


## pivot_wider()

previously: `spread()`

make sure to have tidyr 1.0

Makes a long table wider. 

```{r, eval = FALSE}

table2 %>% 
  pivot_wider(names_from = type, 
              values_from = count)

```


```{r echo = FALSE, out.width = "65%"}
include_graphics("./figures/tidy_pivot_wider.png")
```


## pivot_wider()

```{r, eval = FALSE}

table2 %>% 
  pivot_wider(names_from = type, 
              values_from = count)

```


We need to specify: 

>- `names_from`: which column contains the new column names?
>- `values_from`: which column contains the values?

>- Additional options: 
>- `?pivot_wider`
>- `vignette("pivot")`


## pivot_longer

previously: `gather()`

make sure to have tidyr 1.0


Makes a wide table longer.  

```{r, eval = FALSE}

table4a %>% 
  pivot_longer(cols = c('1999', '2000'), 
               names_to = "year", 
               values_to = "cases")
```


```{r echo = FALSE, out.width = "85%"}
include_graphics("./figures/tidy_pivot_longer.png")
```

## pivot_longer

```{r, eval = FALSE}

table4a %>% 
  pivot_longer(cols = c('1999', '2000'), 
               names_to = "year", 
               values_to = "cases")
```


We need to specify: 

>- `cols`: choose columns to be transformed 
>- `names_to`: column-name for the key, in quotes
>- `values_to`: column-name for the values, in quotes

>- Additional options: 
>- `?pivot_longer`
>- `vignette("pivot")`


## pivot_longer

Selection of columns in `cols` argument can be forward or backward

```{r, eval = FALSE}
# forward: define which columns to use
table4a %>% 
  pivot_longer(cols = c('1999', '2000'), 
               names_to = "year", 
               values_to = "cases")

# backward: define which columns NOT to use
table4a %>% 
  pivot_longer(cols = c(-country), 
               names_to = "year", 
               values_to = "cases")


```



```{r echo = FALSE, out.width = "65%"}
include_graphics("./figures/tidy_pivot_longer.png")
```


## Separating

Problem: column `table3$rate` contains multiple values in one cell. 

```{r}
table3
```


## Separating

```{r, eval = FALSE}
table3 %>% 
  separate(rate, into = c("cases", "population"))
```


```{r echo = FALSE, out.width = "85%"}
include_graphics("./figures/tidy_separate.png")
```

## Separating

Where does it separate?

By default: Whereever it sees as non-alphanumeric character. 

We can also specify it

```{r, eval = FALSE}
# separate at "/"
table3 %>% 
  separate(rate, into = c("cases", "population"), sep = "/") 

# separate at defined position
table3 %>% 
  separate(year, into = c("century", "year"), sep = 2)

```



## Separate

Look careful at column types of output. New columns are stored as 'character'. That doesn't allow us to do calculations.

```{r}
table3 %>% 
  separate(rate, into = c("cases", "population"))
```

Solution: 
`convert = TRUE` tries to change the column-types to better types
```{r}
table3 %>% 
  separate(rate, into = c("cases", "population"), convert = TRUE) 
```


## Unite

The inverse of `separate()`

```{r, eval = FALSE}
table5 %>% 
  unite(new, century, year)
```


```{r echo = FALSE, out.width = "85%"}
include_graphics("./figures/tidy_unite.png")
```



## Exercise: transform tables 

Reproduce the following figure starting with `table1`,` table2`, and `table3`. 

Calculate rate = cases/population * 1000

```{r, echo = FALSE}
table1 %>% 
  mutate(rate = cases/population * 1000) %>% 
  pivot_longer(cols = c(cases:rate), 
               names_to = "Variable", 
               values_to = "Value") %>% 
  ggplot(aes(x = year, y = Value, color = country)) + 
  geom_point() + geom_line() +
  facet_grid(Variable ~., scales = "free")
```


```{r, eval = FALSE, include = FALSE}
table1 %>% 
  mutate(rate = cases/population * 1000) %>% 
  pivot_longer(cols = c(cases:rate), 
               names_to = "Variable", 
               values_to = "Value") %>% 
  ggplot(aes(x = year, y = Value, color = country)) + 
  geom_point() + 
  facet_wrap(Variable ~., scales = "free")

table2 %>% 
  pivot_wider(names_from = "type", values_from = "count") %>% 
  mutate(rate = cases/population * 1000) %>% 
  pivot_longer(cols = c(cases:rate), 
               names_to = "Variable", 
               values_to = "Value") %>% 
  ggplot(aes(x = year, y = Value, color = country)) + 
  geom_point() + 
  facet_wrap(Variable ~., scales = "free")

table3 %>% 
  separate(rate, into = c("cases", "population"), convert = TRUE) %>% 
  mutate(rate = cases/population * 1000) %>% 
  pivot_longer(cols = c(cases:rate), 
               names_to = "Variable", 
               values_to = "Value") %>% 
  ggplot(aes(x = year, y = Value, color = country)) + 
  geom_point() + 
  facet_wrap(Variable ~., scales = "free")
  
  
```



## Missing values

Explicit and implicit missing values. 

An explicit missing value is the presence of an absence. 

An implicit missing value is the absence of a presence. 


```{r}
stocks <- tibble(
  year   = c(2015, 2015, 2015, 2015, 2016, 2016, 2016),
  quarter    = c(   1,    2,    3,    4,    2,    3,    4),
  return = c(1.88, 0.59, 0.35,   NA, 0.92, 0.17, 2.66)
)

stocks

```


## Make NA's explicit

We can make implicit NA's explicit. 

```{r}

# take set of columns and finds all uniqe combinations, fill with NA in case combination is missing
stocks %>% 
  complete(year, quarter)

```

## Make NA's implicit


<div class="columns-2">
```{r}
stocks %>% 
  pivot_wider(names_from=year, 
              values_from = return) %>% 
  pivot_longer(cols = - quarter, 
               names_to = "year",
               values_to = "return")


stocks %>% 
  pivot_wider(names_from=year, 
              values_from = return) %>% 
  pivot_longer(cols = - quarter, 
               names_to = "year",
               values_to = "return", 
               values_drop_na = TRUE)

```
</div>


## Missing values: fill()

Quite often columns are incomplete. `fill()`allows to fill a column. Example:

```{r, include = FALSE}
treatment <- tribble(
  ~ person,           ~ treatment, ~response,
  "Derrick Whitmore", 1,           7,
  NA,                 2,           10,
  NA,                 3,           9,
  "Katherine Burke",  1,           4
)

```


<div class="columns-2">

```{r}
# original file
treatment

treatment %>% 
  fill(person)

```

</div>

## Summary: TidyR

A tidy dataset follows three rules: 

1. Each variable must have its own column
2. Each observation must have its own row
3. Each value must have its own cell


```{r echo = FALSE, out.width = "85%"}
include_graphics("./figures/tidydata_rules.png")
```

The functions `pivot_longer`, `pivot_wider`and `separate` allow us to tidy up messy tables. 

