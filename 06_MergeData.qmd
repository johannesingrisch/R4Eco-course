# Relational data

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
library(kableExtra)
library(tidyverse)
library(datasauRus)
library(knitr)
library(nycflights13)
options("kableExtra.html.bsTable" = T)
kable_pretty <- function(data) {
  kable(data, "html") %>%
    kable_styling(bootstrap_options = c("striped", "condensed", full_width=T, position = "center"), full_width=F)
}
```


## Relational Data

Reality: Data is spread out over multiple tables. 

Solution: Join tables via relations. 

__Mutating joins__: add new variables to one data frame from matching observations in another. 


Example: We want to combine data on infection cases and population size for each year and country.

<div class="columns-2">
```{r, echo = FALSE}
table4a %>% 
  pivot_longer(cols = -country, names_to = "year", values_to = "cases")

table4b %>% 
  pivot_longer(cols = -country, names_to = "year", values_to = "population")

```
<div>


## Relational Data

The variables that connect each pair of tables are called __keys__. 

A __key__ is a variable (or set of variables) that uniquely identifies an observation. 

What is a key in this dataset?

```{r, echo = FALSE}
table4a %>% 
  pivot_longer(cols = -country, names_to = "year", values_to = "cases")
```

## Relational Data

Is there a unique key in mpg?

```{r, echo = FALSE}
mpg
```



## Joining tables: Example

```{r, echo = FALSE}
table6a <- table4a %>% 
  pivot_longer(cols = -country, names_to = "year", values_to = "cases")

table6b <- table4b %>% 
  pivot_longer(cols = -country, names_to = "year", values_to = "population")

```


<div class="columns-2">
```{r}
table6a
table6b

```
<div>

## Joining tables: Example


```{r}
table6a %>% 
  left_join(table6b, by = c("country", "year"))
```


## Understanding joins

Two tables, colored column represents the __key__, grey represents the __value__. 


```{r echo = FALSE, out.width = "20%"}
include_graphics("./figures/join-setup.png")
```


```{r echo = FALSE, out.width = "30%"}
include_graphics("./figures/join-setup2.png")
```


## Inner Join

Match pairs of observations whenever keys are equal. 


```{r echo = FALSE, out.width = "35%"}
include_graphics("./figures/join-inner.png")
```


```{r, eval = FALSE}

x %>% 
  inner_join(y, by = "key")
```


## Outer Join

An outer join keeps observations that appear in at least one of the tables. There are three types: 

```{r echo = FALSE, out.width = "65%"}
include_graphics("./figures/join-outer_code.png")
```

## Defining key columns


Default: use all variables that appear in both tables. 

```{r, eval = FALSE}
left_join(x, y, by = NULL, copy = FALSE, suffix = c(".x", ".y"), ...)
```


Alternative: 

- define which columns using `by = `

```{r, eval = FALSE}
flights %>% 
  left_join(planes, by = "tailnum")
```

- join by columns with different names

```{r, eval = FALSE}
# match "dest" in table 'flights' with "faa" in table airports
flights %>% 
  left_join(airports, c("dest" = "faa"))
```


## Alternative in base R

```{r echo = FALSE, out.width = "95%"}
include_graphics("./figures/join_vs_merge.png")
```

## Summing up

```{r echo = FALSE, out.width = "60%"}
include_graphics("./figures/Data_wrangling.png")
```

```{r echo = FALSE, out.width = "35%"}
include_graphics("./figures/tidyverse_3.png")
```


## Exercise


Reproduce the following figure using table4a and table4b

```{r, echo = FALSE}
table4c <- table4a %>% 
  pivot_longer(cols = -country, names_to = "year", values_to = "cases")

table4b %>% 
  pivot_longer(cols = -country, names_to = "year", values_to = "population") %>% 
  left_join(table4c) %>% 
  mutate(rate = cases/population * 1000) %>% 
  pivot_longer(cols = c(cases, rate, population), 
               names_to = "Variable", 
               values_to = "Value") %>% 
  mutate(year = as.numeric(year)) %>% 
  ggplot(aes(x = year, y = Value, color = country)) + 
  geom_point() + geom_line() +
  facet_grid(Variable ~., scales = "free")

```




## Binding rows

We can bind rows of multiple tables with identical columns

```{r}
a <- tibble(name = c("Hans", "Sepp"), weight = c(65,75))
b <- tibble(name = c("Magda", "Klaus"), weight = c(65,60))
```

<div class="columns-2">
```{r}
# rbase
rbind(a, b)

# tidyverse: pipe compatible
a %>% 
  bind_rows(b)

```
<div>
